{"version":3,"sources":["utils/refreshToken.js","components/Login.js","components/Logout.js","components/LoginHooks.js","components/LogoutHooks.js","App.js","reportWebVitals.js","index.js"],"names":["refreshTokenSetup","res","refreshTiming","tokenObj","expires_in","refreshToken","a","reloadAuthResponse","newAuthRes","console","log","localStorage","setItem","id_token","setTimeout","Login","clientId","buttonText","onSuccess","profileObj","alert","name","onFailure","cookiePolicy","style","marginTop","isSignedIn","Logout","onLogoutSuccess","LoginHooks","signIn","useGoogleLogin","accessType","onClick","className","src","alt","LogoutHooks","signOut","useGoogleLogout","App","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0OAAaA,EAAoB,SAACC,GAE9B,IAAIC,EAA6D,KAA5CD,EAAIE,SAASC,YAAc,MAE1CC,EAAY,uCAAG,4BAAAC,EAAA,sEACML,EAAIM,qBADV,OACbC,EADa,OAEnBN,EAA2D,KAA1CM,EAAWJ,YAAc,MAC1CK,QAAQC,IAAI,cAAeF,GAE3BG,aAAaC,QAAQ,YAAaJ,EAAWK,UAG7CC,WAAWT,EAAcH,GARN,2CAAH,qDAYlBY,WAAWT,EAAcH,I,OCwBda,MA/Bf,WAgBE,OACE,8BACE,cAAC,cAAD,CACEC,SArBN,2EAsBMC,WAAW,QACXC,UApBY,SAACjB,GACjBQ,QAAQC,IAAI,8BAA+BT,EAAIkB,YAC/CC,MAAM,kCAAD,OAC+BnB,EAAIkB,WAAWE,KAD9C,2DAGLrB,EAAkBC,IAgBdqB,UAbY,SAACrB,GACjBQ,QAAQC,IAAI,qBAAsBT,GAClCmB,MAAM,iFAYFG,aAAc,qBACdC,MAAO,CAAEC,UAAW,SACpBC,YAAY,OCXLC,MAjBf,WAME,OACE,8BACE,cAAC,eAAD,CACEX,SAXN,2EAYMC,WAAW,SACXW,gBAVY,WAChBnB,QAAQC,IAAI,4BACZU,MAAM,yCCmCKS,MAnCf,WACE,IAeQC,EAAWC,yBAAe,CAChCb,UAhBgB,SAACjB,GACjBQ,QAAQC,IAAI,8BAA+BT,EAAIkB,YAC/CC,MAAM,kCAAD,OAC+BnB,EAAIkB,WAAWE,KAD9C,2DAGLrB,EAAkBC,IAYlBqB,UATgB,SAACrB,GACjBQ,QAAQC,IAAI,qBAAsBT,GAClCmB,MAAM,iFAQNJ,SArBF,2EAsBEU,YAAY,EACZM,WAAY,YALNF,OAUR,OACE,yBAAQG,QAASH,EAAQI,UAAU,SAAnC,UACE,qBAAKC,IAAI,mBAAmBC,IAAI,eAAeF,UAAU,SAEzD,sBAAMA,UAAU,aAAhB,qCCRSG,MAzBf,WACE,IASQC,EAAYC,0BAAgB,CAClCvB,SAbF,2EAcEY,gBAXsB,SAAC3B,GACvBQ,QAAQC,IAAI,sBACZU,MAAM,mCAUNE,UAPgB,WAChBb,QAAQC,IAAI,2BAGN4B,QAMR,OACE,yBAAQL,QAASK,EAASJ,UAAU,SAApC,UACE,qBAAKC,IAAI,mBAAmBC,IAAI,eAAeF,UAAU,SAEzD,sBAAMA,UAAU,aAAhB,0BCCSM,MApBf,WACE,OACE,sBAAKN,UAAU,MAAf,UACE,oDACA,cAAC,EAAD,IACA,uBACA,cAAC,EAAD,IACA,+CACA,cAAC,EAAD,IACA,cAAC,EAAD,IACA,uBARF,0CAS0C,IACxC,mBAAGO,KAAK,4DAAR,yBAEK,IAZP,mBCGWC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.273f265c.chunk.js","sourcesContent":["export const refreshTokenSetup = (res) => {\n    // Timing to renew access token\n    let refreshTiming = (res.tokenObj.expires_in || 3600 - 5 * 60) * 1000;\n  \n    const refreshToken = async () => {\n      const newAuthRes = await res.reloadAuthResponse();\n      refreshTiming = (newAuthRes.expires_in || 3600 - 5 * 60) * 1000;\n      console.log('newAuthRes:', newAuthRes);\n      // saveUserToken(newAuthRes.access_token);  <-- save new token\n      localStorage.setItem('authToken', newAuthRes.id_token);\n  \n      // Setup the other timer after the first one\n      setTimeout(refreshToken, refreshTiming);\n    };\n  \n    // Setup first refresh timer\n    setTimeout(refreshToken, refreshTiming);\n  };\n  ","import React from 'react';\n\nimport { GoogleLogin } from 'react-google-login';\n// refresh token\nimport { refreshTokenSetup } from '../utils/refreshToken';\n\nconst clientId =\n  '832040387372-j1ij4vn25qhtrmm9c2n4dtqdjtd4nr2i.apps.googleusercontent.com';\n\nfunction Login() {\n  const onSuccess = (res) => {\n    console.log('Login Success: currentUser:', res.profileObj);\n    alert(\n      `Logged in successfully welcome ${res.profileObj.name} 😍. \\n See console for full profile object.`\n    );\n    refreshTokenSetup(res);\n  };\n\n  const onFailure = (res) => {\n    console.log('Login failed: res:', res);\n    alert(\n      `Failed to login. 😢 Please ping this to repo owner ashwini2206soni`\n    );\n  };\n\n  return (\n    <div>\n      <GoogleLogin\n        clientId={clientId}\n        buttonText=\"Login\"\n        onSuccess={onSuccess}\n        onFailure={onFailure}\n        cookiePolicy={'single_host_origin'}\n        style={{ marginTop: '100px' }}\n        isSignedIn={true}\n      />\n    </div>\n  );\n}\n\nexport default Login;","import React from 'react';\nimport { GoogleLogout } from 'react-google-login';\n\nconst clientId =\n  '832040387372-j1ij4vn25qhtrmm9c2n4dtqdjtd4nr2i.apps.googleusercontent.com';\n\nfunction Logout() {\n  const onSuccess = () => {\n    console.log('Logout made successfully');\n    alert('Logout made successfully ✌');\n  };\n\n  return (\n    <div>\n      <GoogleLogout\n        clientId={clientId}\n        buttonText=\"Logout\"\n        onLogoutSuccess={onSuccess}\n      ></GoogleLogout>\n    </div>\n  );\n}\n\nexport default Logout;","import React from 'react';\nimport { useGoogleLogin } from 'react-google-login';\n\n// refresh token\nimport { refreshTokenSetup } from '../utils/refreshToken';\n\nconst clientId =\n  '832040387372-j1ij4vn25qhtrmm9c2n4dtqdjtd4nr2i.apps.googleusercontent.com';\n\nfunction LoginHooks() {\n  const onSuccess = (res) => {\n    console.log('Login Success: currentUser:', res.profileObj);\n    alert(\n      `Logged in successfully welcome ${res.profileObj.name} 😍. \\n See console for full profile object.`\n    );\n    refreshTokenSetup(res);\n  };\n\n  const onFailure = (res) => {\n    console.log('Login failed: res:', res);\n    alert(\n      `Failed to login. 😢 Please ping this to repo owner ashwini2206soni`\n    );\n  };\n\n  const { signIn } = useGoogleLogin({\n    onSuccess,\n    onFailure,\n    clientId,\n    isSignedIn: true,\n    accessType: 'offline',\n    // responseType: 'code',\n    // prompt: 'consent',\n  });\n\n  return (\n    <button onClick={signIn} className=\"button\">\n      <img src=\"icons/google.svg\" alt=\"google login\" className=\"icon\"></img>\n\n      <span className=\"buttonText\">Sign in with Google</span>\n    </button>\n  );\n}\n\nexport default LoginHooks;","import React from 'react';\nimport { useGoogleLogout } from 'react-google-login';\n\nconst clientId =\n  '832040387372-j1ij4vn25qhtrmm9c2n4dtqdjtd4nr2i.apps.googleusercontent.com';\n\nfunction LogoutHooks() {\n  const onLogoutSuccess = (res) => {\n    console.log('Logged out Success');\n    alert('Logged out Successfully ✌');\n  };\n\n  const onFailure = () => {\n    console.log('Handle failure cases');\n  };\n\n  const { signOut } = useGoogleLogout({\n    clientId,\n    onLogoutSuccess,\n    onFailure,\n  });\n\n  return (\n    <button onClick={signOut} className=\"button\">\n      <img src=\"icons/google.svg\" alt=\"google login\" className=\"icon\"></img>\n\n      <span className=\"buttonText\">Sign out</span>\n    </button>\n  );\n}\n\nexport default LogoutHooks;","import React from 'react';\nimport './App.css';\nimport Login from './components/Login';\nimport Logout from './components/Logout';\nimport LoginHooks from './components/LoginHooks';\nimport LogoutHooks from './components/LogoutHooks';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h2>The Components way</h2>\n      <Login />\n      <br />\n      <Logout />\n      <h2>The Hooks way</h2>\n      <LoginHooks />\n      <LogoutHooks />\n      <br />\n      If it does helped you feel free to star{' '}\n      <a href=\"https://github.com/Sivanesh-S/react-google-authentication\">\n        Github Repo\n      </a>{' '}\n      😉\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}